<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <author>David Ladapo</author>
        <title>Number Reader Program</title>
    </properties>
    <meta name="keyword" content="Numbers, English Translation Of Numbers, Java"/>
    <body>
  
<section name="Introduction">
<p>The exercise stated below has led to the creation of this java driven solution.In the solution, no external apis were used in creating the application with build/deployment driven by Maven 3.01  and unit tests was written with Junit 4.</p>
<p>Additionally, the application provides a native means of calling the program directly from the command line on a suitable console..i.e typing java NumberReader [123456] should produce One Hundred And Twenty-Three Thousand, Four Hundred And Fifty Six</p>
<p>Please note that no code has been added from internet sources or resources and the delivered work is 100% unplagiarized code.</p>
<h3>Solution Reports</h3>
<p>The reports created for the solution is divided into 4 parts namely:</p>
<ul>
<li>Quality metrics generated by Sonar, which uses findbugs,pmd,checkstyle and other plugins not explicitly stated.<a href="sonar.html">...view</a></li>
<li>Javadoc documentation of the java classes and objects which drive the solution.<a href="apidocs/index.html">...view</a></li>
<li>Generated test results which were created when the junit driven tests were run on the classes.<a href="test-results.txt">...view</a></li>
<li>Class diagrams representing the interaction of the objects used within the application<a href="images/number_reader.jpg">...view</a></li>
</ul>


<h3>Solution Description<a name="desc"></a></h3>
<p>The Number reader classes provide an implementation for generating the english language word representation of numbers from 0-10E63.</p>

<p>The classes have been developed for extensibility and reuse and provide 1 main class (AbstractNumberReader) which uses an adapter called a Translator.The Translator is an interface which provides base signatures for classes wishing to translate numbers to their string equivalent.</p>
<p> The Translator is associated with an abstract number builder so that classes which implement a translator can have access to an external helper class which will be used to build individual strings</p>
<p>A default Translator is provided with the package which uses the chain of responsibility design pattern to derive which magnitude of number it is parsing and provides additional methods (via its builder) for parsing what we call primary numbers.i.e 1-999(These numbers consistently appear as subsets of big numbers e.g billion!)</p>

<p>These implementation is presently supported by 2 enum classes and a default Exception.</p>
<h3>Problem<a name="prob"></a></h3>
 <p>
 Take a number and give the equivalent number in british english words
 e.g.
 </p>
<ul>
<li> 1 = one</li>

<li> 21 = twenty one</li>

<li> 105 = one hundred and five</li>

<li> 56945781 = fifty six million nine hundred and forty five thousand
seven hundred and eighty one</li>

<li> etc.. up to 10E63 without using a tokenizer, or any external
 libraries</li>
</ul>
<p> As a pointer on what we would be looking for in the app:</p>
<ul>

<li> clear separation of concerns </li>
<li> well defined objects / interfaces </li>
<li> application of patterns to solve the problem </li>
<li> no code duplication </li>
</ul>
<p> others that would be a bonus would be</p>
<ul>
<li> Test Driven Development </li>
<li> Well refactored code </li>
</ul>
 As a pointer on what we would be looking for in the app:

<ol>
<li> application of good OO design principles to solve the problem</li>
 <li> well tested code</li>
 <li> well refactored code</li>
</ol>     
<h3>Copyrights And Licensing<a name="copy"></a></h3>
<p>Zphinx Software Solutions is the trading name used by David Ladapo for software development purposes. All files created on this computer will usually be copyrighted to Zphinx Software Soutions unless otherwise stated. </p>
   </section>
    </body>
</document>
